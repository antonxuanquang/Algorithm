import java.util.EmptyStackException;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Stack;


public class Two {
	/*
	 * 
	 * How would you design a stack which, in addition to push and 
	 * pop, has a function min which returns the minimum element?
	 * Push, pop and min should all operate in O(1) time. 
	 * 
	 */
	
	/*
	 * 
	 * My approach: rebuild a stack. It's not efficient since the
	 * question doesn't require me to rebuild the stack
	 * 
	 */
	private static class MinStack implements Iterable<Integer> {
		MinStackNode top;
		Stack<Integer> min = new Stack<Integer>();
		
		public int pop() {
			// doesn't have anything yet
			if (top == null) throw new EmptyStackException();
			
			// save top's data
			int result = top.data;
			
			// if pop min
			if (result == min()) min.pop();
			
			// change the top to next
			top = top.next;
			
			return result;
		}
		
		public void push(int data) {
			MinStackNode node = new MinStackNode(data);
			
			// when there is no element in stack
			if (top == null) {
				top = node;
				min.push(data);
			
			// when stack have something
			} else {
				// change min if has smaller element
				if (node.data <= min.peek()) min.push(data);
				
				// change top
				node.next = top;
				top = node;
			}
		}
		
		public int min() {
			if (top == null) return Integer.MAX_VALUE;
			else return min.peek();
		}
		
		public String toString() {
			StringBuilder builder = new StringBuilder();
			for (int element: this) {
				builder.append(element + " -> ");
			}
			builder.append("null");
			return builder.toString();
		}
		
		public Iterator<Integer> iterator() {
			return new MinStackIterator();
		}
		
		private class MinStackIterator implements Iterator<Integer> {
			private MinStackNode node;
			
			public MinStackIterator() {
				this.node = top;
			}
			
			public boolean hasNext() {
				return node != null;
			}
			
			public Integer next() {
				if (!hasNext()) throw new NoSuchElementException();
				int result = node.data;
				node = node.next;
				return result;
			}
		}
	}
	
	private static class MinStackNode {
		int data;
		MinStackNode next;
		
		public MinStackNode(int data) {
			this.data = data;
			next = null;
		}
	}
	
	/*
	 * 
	 * Book's approach
	 * 
	 */
	private static class MinStack2 extends Stack<Integer>{
		Stack<Integer> min;
		
		public MinStack2() {
			min = new Stack<Integer>();
		}
		
		public void push (int value) {
			if (value <= min()) {
				min.push(value);
			}
			super.push(value);
		}
		
		public Integer pop() {
			int value = super.pop();
			if (value == min.peek()) min.pop();
			return value;
		}
		
		public int min() {
			if (min.isEmpty()) return Integer.MAX_VALUE;
			else return min.peek();
		}
	}
	
	public static void main (String[] args) {
		MinStack stack = new MinStack();
		stack.push(3);
		stack.push(6);
		stack.pop();
		System.out.println(stack.min());
		stack.push(1);
		stack.pop();
		stack.push(5);
		stack.push(17);
		stack.push(1);
		stack.push(2);
		stack.push(3);
		System.out.println(stack.min());
		System.out.println(stack);
		
		MinStack2 stack2 = new MinStack2();
		stack2.push(3);
		stack2.push(6);
		stack2.pop();
		System.out.println(stack2.min());
		stack2.push(1);
		stack2.push(1);
		stack2.pop();
		stack2.push(5);
		stack2.push(17);
		stack2.push(2);
		stack2.push(3);
		System.out.println(stack2.min());
		System.out.println(stack2);
		
	}
	
	
	
	
}
