import java.util.HashMap;


public class Eleven {
	
	/*
	 * 
	 * Coins: given an infinite number of quarters (25 cents), dimes (10 cents), 
	 * nickels (5 cents), and pennies (1 cent), write code to calculate the 
	 * number of ways of representing n cents.
	 * 
	 */
	
	public static int coins(int n) {
		HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
		return coins(n, map);
	}
	
	private static int coins(int n, HashMap<Integer, Integer> map) {
		if (n == 0) return 1;
		if (map.containsKey(n)) return map.get(n);
		
		int quarters = 0, dimes = 0, nickels = 0, pennies = 0;
		if (n >= 25) 	quarters 	= coins(n - 25, map);
		if (n >= 10) 	dimes 		= coins(n - 10, map);
		if (n >= 5) 	nickels 	= coins(n - 5, map);
		pennies 	= coins(n - 1);
		int total = quarters + dimes + nickels + pennies;
		map.put(n, total);
		return total;
	}
	
	public static int coinsWithoutMemmo(int n) {
		if (n == 0) return 1;
		
		int quarters = 0, dimes = 0, nickels = 0, pennies = 0;
		if (n >= 25) 	quarters 	= coins(n - 25);
		if (n >= 10) 	dimes 		= coins(n - 10);
		if (n >= 5) 	nickels 	= coins(n - 5);
		pennies 	= coins(n - 1);
		return quarters + dimes + nickels + pennies;
	}

	/*
	 * 
	 * with memmo: can do up to n = 65
	 * without memmo: can do up to n = 65, with 2sec different
	 * 
	 */
	
	public static int makeChange(int amount, int[] denoms, int index) {
		if (index >= denoms.length - 1) return 1; // one denom remaining -> one way to do it
		int denomAmount = denoms[index];
		int ways = 0;
		for (int i = 0; i * denomAmount <= amount; i++) {
			int amountRemaining = amount - i * denomAmount;
			ways += makeChange(amountRemaining, denoms, index + 1); // go to next denom
		}
		return ways;
	}
	
	public static int makeChange(int amount, int[] denoms) {
		return makeChange(amount, denoms, 0);
	}
	
	public static void main(String[] args) {
		int[] denoms = {25, 10, 5, 1};
		int ways = makeChange(30, denoms);
		System.out.println(coins(30));
		System.out.println(ways);
	}

//	public static void main (String[]args) {
//		long start = System.currentTimeMillis();
//		System.out.println(coins(65));
//		long end1 = System.currentTimeMillis();
//		System.out.println(coinsWithoutMemmo(65));
//		long end2 = System.currentTimeMillis();
//		
//		System.out.println(end1 - start);
//		System.out.println(end2 - end1);
//	}

}
