
public class Five {
	
	/*
	 * 
	 * Recursive Multiply: Write a recursive function to multiply two positive
	 * integers without using the * operator. You can use addition, subtraction,
	 * and bit shifting, but you should minimize the number of those operations.
	 * 
	 */
	
	public static int iterativeMultiply(int number, int product) {
		if (product == 0) return 0;
		int shift = 0;
		int result = 0;
		while (shift < Integer.SIZE) {
			int mask = 1 << shift;
			result += (product & mask) != 0 ? (number << shift) : 0;
			shift++;
		}
		return result;
	}
	
	public static int recursiveMultiply(int number, int product) {
		if (product == 0) return 0;
		return recursiveMultiply(number, product, 0);
	}
	
	private static int recursiveMultiply(int number, int product, int shift) {
		System.out.println(shift);
		if (shift == Integer.SIZE) return 0;
		int mask = 1 << shift;
		return ((product & mask) != 0 ? (number << shift) : 0) + 
				recursiveMultiply(number, product, ++shift);
	}

	public static void main (String[]strings) {
		System.out.println(iterativeMultiply(8, 1324879));
		System.out.println(iterativeMultiply(8, -1324879));
		System.out.println(recursiveMultiply(8, 1324879));
		System.out.println(recursiveMultiply(8, -1324879));
	}

}
