import java.util.ArrayList;


public class Twelve {
	/*
	 * 
	 * Paths wit Sum: you are given a binary tree in which each node contains 
	 * an integer value (which might be positive or negative). Design an 
	 * algorithm to count the number of paths that sum to a given value.
	 * The path does not need to start or end at the root or a leaf, but it
	 * must go downwards (traveling only from parent nodes to child nodes) 
	 * 
	 */
	
	private static class Result {
		ArrayList<Integer> sum;
		int count;
		
		public Result(ArrayList<Integer> sum, int count) {
			this.sum = sum;
			this.count = count;
		}
	}
	
	public static int pathWithSum(BTNode<Integer> node, int number) {
		return pathWithSumHelper(node, number).count;
	}

	private static Result pathWithSumHelper(BTNode<Integer> node, int number) {
		if (node == null) return new Result(new ArrayList<Integer>(), 0);
		
		Result leftSum = pathWithSumHelper(node.getLeft(), number);
		Result rightSum = pathWithSumHelper(node.getRight(), number);
		
		ArrayList<Integer> sumArray = new ArrayList<Integer>();
		sumArray.add(node.getData());
		for (int left: leftSum.sum) {
			sumArray.add(left + node.getData());
		}
		for (int right: rightSum.sum) {
			sumArray.add(right + node.getData());
		}
		int count = 0;
		for (int sum: sumArray) {
			System.out.println(sum);
			if (sum == number) count++;
		}
		System.out.println("end");
		return new Result(sumArray, count);		
	}
	
	public static void main(String[] args) {
		BTNode<Integer> a = new BTNode<Integer>(6);
		BTNode<Integer> b = new BTNode<Integer>(7);
		BTNode<Integer> c = new BTNode<Integer>(8);
		BTNode<Integer> d = new BTNode<Integer>(-5);
		BTNode<Integer> e = new BTNode<Integer>(3);
		BTNode<Integer> f = new BTNode<Integer>(2);
		BTNode<Integer> g = new BTNode<Integer>(5);
		BTNode<Integer> h = new BTNode<Integer>(-4);

		a.setLeft(b);
		a.setRight(h);
		b.setLeft(c);
		b.setRight(d);
		h.setLeft(e);
		h.setRight(g);
		e.setLeft(f);
		
//		System.out.println(pathWithSum(a, 11));
//		System.out.println(pathWithSum(a, 6));
//		System.out.println(pathWithSum(a, 8));
//		System.out.println(pathWithSum(a, 13));
		System.out.println(pathWithSum(a, 5));
	}
}
