
public class Ten {
	
	/*
	 * 
	 * Rank from Stream: Imagine you are reading in a stream of integers. Periodically, 
	 * you wish to be able to look up the rank of a number x (the number of values less
	 * than or equal to x). Implement the data structures and algorithms to support 
	 * these operations. That is, implement the method track(int x), which is called 
	 * when each number is generated, and the method getRankOfNumber(int x), which returns
	 * the number of values less than or equal to x (not including x itself).
	 * 
	 * Example: 
	 * 	+ Stream (in order of appearances): 5, 1, 4, 4, 5, 9, 7, 13, 3
	 * 	+ getRankOfNumber(1) = 0
	 *  + getRankOfNumber(3) = 1
	 *  + getRankofNumber(4) = 3
	 * 
	 */
	
	private static class BSTNode {
		private int value;
		private int size;
		private BSTNode left;
		private BSTNode right;
		
		public BSTNode(int value) {
			this.value = value;
		}
		

		public int getValue() {
			return value;
		}

		public void setValue(int value) {
			this.value = value;
		}

		public BSTNode getLeft() {
			return left;
		}

		public void setLeft(BSTNode left) {
			this.left = left;
		}

		public BSTNode getRight() {
			return right;
		}

		public void setRight(BSTNode right) {
			this.right = right;
		}
		
		public int getSize() {
			if (left == null && right == null) return 1;
			int leftSize = 0, rightSize = 0;
			if (left != null) leftSize = left.getSize();
			if (right != null) rightSize = right.getSize();
			return leftSize + rightSize + 1;
		}
	}
	
	private static class StreamTree {
		BSTNode root;
		
		public void track(int value) {
			
		}
	}
}
