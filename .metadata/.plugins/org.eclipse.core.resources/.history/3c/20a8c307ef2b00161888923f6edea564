import java.util.Iterator;


public class Two {
	/*
	 * 
	 * How would you design a stack which, in addition to push and 
	 * pop, has a function min which returns the minimum element?
	 * Push, pop and min should all operate in O(1) time. 
	 * 
	 */
	
	private class MinStack implements Iterable<Integer> {
		MinStackNode top;
		MinStackNode min;
		
		public int pop() {
			// save top's data
			int result = top.data;
			
			// change the top to next
			top = top.next;
			
			return result;
		}
		
		public void push(int data) {
			MinStackNode node = new MinStackNode(data);
			
			// when there is no element in stack
			if (top == null) {
				top = node;
				min = node;
			}
			// when stack have something			
			
			// change min if has smaller element
			if (node.data < min.data) min = node;
			
			
			// change top
			node.next = top;
			top = node;			
		}
		
		public int min() {
			return min.data;
		}
		
		public Iterator<Integer> iterator() {
			return new MinStackIterator();
		}
		
		private class MinStackIterator implements Iterator<Integer> {
			MinStackNode node = top;
			
			public boolean hasNext() {
				return node.next != null;
			}
			
			public int next() {
				int result = node.data;
				node = node.next;
				return result;
			}
		}
	}
	
	private class MinStackNode {
		int data;
		MinStackNode next;
		
		public MinStackNode(int data) {
			this.data = data;
			next = null;
		}
	}
}
