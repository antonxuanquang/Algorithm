import java.util.NoSuchElementException;
import java.util.Stack;


public class Four {
	
	/*
	 * 
	 * Implement a MyQueue class which implements a queue using two stacks
	 * e
	 */
	
	/*
	 * 
	 * My answer: using boolean
	 * 
	 */
	private static class DoubleStackQueue<T> {
		boolean hasJustPopped = false;
		Stack<T> original = new Stack<T>();
		Stack<T> reverse = new Stack<T>();
		
		public void add(T data) {
			if (hasJustPopped) {
				while (!reverse.isEmpty()) {
					original.push(reverse.pop());
				}
			}
			original.push(data);
			hasJustPopped = false;
		}
		
		public T remove() {
			if (hasJustPopped) {
				if (reverse.isEmpty()) throw new NoSuchElementException();
				return reverse.pop();
			} else {
				while (!original.isEmpty()) {
					reverse.push(original.pop());
				}
				if (reverse.isEmpty()) throw new NoSuchElementException();
				hasJustPopped = true;
				return reverse.pop();
			}
		}
		
		public T peek() {
			if (hasJustPopped) {
				if (reverse.isEmpty()) throw new NoSuchElementException();
				return reverse.peek();
			} else {
				while (!original.isEmpty()) {
					reverse.push(original.pop());
				}
				if (reverse.isEmpty()) throw new NoSuchElementException();
				hasJustPopped = true;
				return reverse.peek();
			}
		}
		
		public boolean isEmpty() {
			if (hasJustPopped) 	return reverse.isEmpty();
			else 				return original.isEmpty();
		}
		
		public String toString() {
			if (hasJustPopped) {
				while (!reverse.isEmpty()) {
					original.push(reverse.pop());
				}
			}
			return original.toString();
		}	
	}
	
	/*
	 * 
	 * Book's answer: update old stack whenever remove or peek
	 * 
	 */
	
	
	public static void main(String[] args) {
		DoubleStackQueue<Integer> queue = new DoubleStackQueue<Integer>();
		queue.add(3);
		queue.add(4);
//		queue.remove();
//		queue.remove();
		queue.add(4);
		queue.add(1);
		queue.add(7);
//		queue.remove();
		queue.add(2);
		
		System.out.println(queue.peek());
		System.out.println(queue);
		
		queue.add(2);
		queue.add(2);
		queue.add(2);
		queue.remove();
		queue.add(2);
		queue.remove();
		queue.remove();
		
		System.out.println(queue.peek());
		System.out.println(queue);
		
		
	}
	
	
	
	
	
}
