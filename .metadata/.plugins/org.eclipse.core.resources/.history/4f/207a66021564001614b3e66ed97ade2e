import java.util.Arrays;

import javax.swing.plaf.basic.BasicBorders.MarginBorder;


public class Nine {

	/*
	 * 
	 * Sorted Matrix Search: Given an M x N matrix in which each row and 
	 * each column is sorted in ascending order, write a method to find an
	 * element
	 * 
	 */
	
	public static int searchMatrix(int[][] matrix, int number) {
		int rowLength = matrix.length;
		if (rowLength == 0) return -1;
		int columnLength = matrix[0].length;
		
		int row = 0;
		int column = 0;
		while (row < rowLength) {
			column = searchRow(matrix[row], number);
			if ()
		}
		
		return -1;
	}
	
	private static int searchColumn(int[][] matrix, int column, int number) {
		int top = 0;
		int bottom = matrix[0].length - 1;
		
		while (top < bottom) {
			int mid = (top + bottom) / 2;
			if (number == matrix[mid][column]) return mid;
			else if (number < matrix[mid][column]) bottom = mid - 1;
			else if (number > matrix[mid][column]) top = mid + 1;
		}
		return top;
	}

	private static int searchRow(int[] array, int number) {
		int left = 0;
		int right = array.length - 1;
		int mid;
		while (left < right) {
			mid = (left + right) / 2;
			if (array[mid] == number) return mid;
			else if (number < array[mid]) right = mid - 1;
			else if (number > array[mid]) left = mid + 1;
			
		}
		return left;
	}
	
	
	
	public static void main(String[] args) {
		int [][] matrix = {{2,4,1,4},
				{2,3,1,4}};
		
		searchMatrix(matrix, 3);
	}
}
