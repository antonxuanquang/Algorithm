
public class Four {
	/*
	 * 
	 * Sorted Search, No Size: you are given an array-like data structure Listy
	 * which lacks a size method. It does, however, have an elementAt(i) method 
	 * that returns the element at index i in O(1) time. If i is beyond the bounds 
	 * of the data structures, it returns -1. (For this reason, the data structure
	 * only supports positive integers). Given a Listy which contains sorted, positive
	 * integers, find the index at which an element x occurs. If x occurs multiple times,
	 * you may return any index.
	 * 
	 */
	
	public static <T extends Comparable<T>> int noSizeSearch(T[] array, T item) {
		
		int index = findNearestPower(array);
		
		
		return -1;
	}
	
	private static <T extends Comparable<T>> int findNearestPower(T[] array) {
		int power = 0;
		while (Math.pow(2, power) < array.length) power++;
		return (int)Math.pow(2, power);
	}
	
	public static void main(String[] args) {
		Integer[] array = {1,3,4,6,7,8,9,22,53,74,172,-1,-1,-1,-1,-1,-1};
		System.out.println(array.length);
		noSizeSearch(array, 5);
	}
}
