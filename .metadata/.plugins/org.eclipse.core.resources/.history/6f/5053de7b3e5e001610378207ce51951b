package introduction;

import java.util.ArrayList;

public class HeapSort extends Sort {

	// public static <T extends Comparable<T>> void sort(ArrayList<T> array) {
	// int size = array.size() - 1;
	// for (int k = size / 2; k >= 0; k--) {
	// heapify(array, k);
	// }
	// // while (size > 1) {
	// // swap(array, 0, size--);
	// // heapify(array, 0);
	// // }
	// for (int i = size; i > 0; i--) {
	// swap(array, 0, i);
	// size--;
	// heapify(array, 0);
	// }
	// }
	//
	// private static <T extends Comparable<T>> void heapify(
	// ArrayList<T> array, int startPoint) {
	// int left = 2 * startPoint;
	// int right = left + 1;
	// int size = array.size() - 1;
	// int largest;
	//
	// if (left <= size && array.get(left).compareTo(array.get(startPoint)) > 0)
	// {
	// largest = left;
	// } else {
	// largest = startPoint;
	// }
	//
	// if (right <= size && array.get(right).compareTo(array.get(largest)) > 0)
	// {
	// largest = right;
	// }
	//
	// if (largest != startPoint) {
	// swap(array, startPoint, largest);
	// heapify(array, largest);
	// }
	// }

	private static int[] a;
	private static int n;
	private static int left;
	private static int right;
	private static int largest;

	public static void buildheap(int[] a) {
		n = a.length - 1;
		for (int i = n / 2; i >= 0; i--) {
			maxheap(a, i);
		}
	}

	public static void maxheap(int[] a, int i) {
		left = 2 * i;
		right = 2 * i + 1;

		if (left <= n && a[left] > a[i]) {
			largest = left;
		} else {
			largest = i;
		}

		if (right <= n && a[right] > a[largest]) {
			largest = right;
		}
		if (largest != i) {
			exchange(i, largest);
			maxheap(a, largest);
		}
	}

	public static void exchange(int i, int j) {
		int t = a[i];
		a[i] = a[j];
		a[j] = t;
	}

	public static void sort(int[] myarray) {
		a = myarray;
		buildheap(a);
		for (int i = n; i > 0; i--) {
			exchange(0, i);
			n = n - 1;
			maxheap(a, 0);
		}
	}

}
