import java.util.ArrayList;
import java.util.Stack;


public class Three {
	/*
	 * 
	 * Implement a SetOfStacks should be composed of serveral stacks
	 * and should create a new stack once the previous one exceeds 
	 * capacity. SetOfStacks.push() and SetOfStacks.pop() should 
	 * behave identically to a single stack (that is, pop() should 
	 * return the same values as it would if there were just a single
	 * stack). 
	 * 
	 */
	
	private static class StackWithCapacity extends Stack<Integer>{
		int capacity = 0;
	}
	
	private static class SetOfStacks {
		ArrayList<Stack<Integer>> stackList;
		ArrayList<Integer> stackCapacity;
		private final int CAPACITY;
		
		public SetOfStacks(int capacity) {
			this.CAPACITY = capacity;
			stackList = new ArrayList<Stack<Integer>>();
			stackCapacity = new ArrayList<Integer>();
			stackCapacity.add(0);
		}
		
		public void push(int value) {
			int currentStack = 0;
			// get the nearest un-full stack
			while (stackCapacity(currentStack) == CAPACITY) {
				currentStack++;
			}
			
			Stack<Integer> stack = stackList.get(currentStack);
			
			// if stack has not been initialize
			if (stack == null) stack = new Stack<Integer>();
			
			stack.push(value);
			
			// increment volume of a stack
			stackCapacity.remove(currentStack);			
			
		}
		
		public int pop() {
			return Integer.MAX_VALUE;
		}
		
		private int stackCapacity(int stackNumber) {
			return stackCapacity.get(stackNumber);
		}
		
	}
}
