import java.util.HashSet;
import java.util.Hashtable;


public class One {
	/*
	 * 
	 * Write code to remove duplicates from an unsorted linked list.
	 * Follow up: How would you solve this problem if a temporary buffer is not allowed?
	 * 
	 */
	
	public static void main(String args[]) {
		LinkedListNode linkedListNode = new LinkedListNode();
		linkedListNode.addToTail(3);
		linkedListNode.addToTail(6);
		linkedListNode.addToTail(3);
		linkedListNode.addToTail(3);
		linkedListNode.addToTail(6);
		linkedListNode.addToTail(5);
		linkedListNode.addToTail(2);
		linkedListNode.addToTail(3);
		linkedListNode.addToTail(4);
		
		System.out.println(linkedListNode);
		removeDup(linkedListNode.head);
		System.out.println(linkedListNode);
	}
	
	static void removeDup(Node head) {
		HashSet<String> hash = new HashSet<>();
		hash.add("castle");
		hash.add("bridge");
		hash.add("castle"); // Duplicate element.
		hash.add("moat");

		// Display size.
		System.out.println(hash.size());

		// See if these three elements exist.
		System.out.println(hash.contains("castle"));
		System.out.println(hash.contains("bridge"));
		System.out.println(hash.contains("moat"));
	}
	
}


