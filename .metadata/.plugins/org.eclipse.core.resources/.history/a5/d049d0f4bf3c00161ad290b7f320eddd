import java.security.NoSuchAlgorithmException;
import java.util.LinkedList;
import java.util.NoSuchElementException;


public class Seven {
	/*
	 * 
	 * You are given a list of projects, and a list of dependencies (which is
	 * a list of pairs of projects, where the second project is dependent on 
	 * the first project). All of a project's dependencies must be built before
	 * the project is. Find a build order that will allow the projects to be
	 * built. If there is no valid build order, return an error.
	 * 
	 * Input: 
	 * 	+ projects: a, b, c, d, e, f
	 * 	+ dependencies: (a, d), (f, b), (b,d), (f, a), (d, c)
	 * 
	 * Output: f, e, a, b, d, c
	 * 
	 */
	
	public static LinkedList<Node> buildSchedule(DiGraph graph) {
		LinkedList<Node> result = new LinkedList<Node>();
		graph.falsifyVertices();
		for (String key: graph.graph.keySet()) {
			Node root = graph.getVirtex(key);
			if (!root.visited) buildSchedule(graph.getVirtex(key), result);
		}
		return result;
	}
	
	private static void buildSchedule(Node root, LinkedList<Node> result) {
		if (root.getLabel() == null) return;
		if (root.visiting) throw new NoSuchElementException();
		root.visited = true;
		result.add(root);
		// visiting node
		root.visiting = true;
		for (Node node: root.getAdj()) {
			if (!node.visited) {
				buildSchedule(node, result);
			}
		}
		// finish visiting
		root.visiting = false;
	}
	
	public static void main (String[] args) {		
		DiGraph graph = new DiGraph();
		graph.addEdge("a", "d");
		graph.addEdge("a", "g");
		graph.addEdge("b", "d");
		graph.addEdge("d", "c");
		graph.addEdge("f", "a");
		graph.addEdge("f", "b");
		graph.addEdge("g", "e");
		try {
			LinkedList<Node> schedule = buildSchedule(graph);
			for (Node node: schedule) {
				System.out.println(node.getLabel());
			}
		} catch (NoSuchElementException e) {
			System.out.println("error occurs");
		}
	}
}
