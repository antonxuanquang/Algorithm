
public class Fourteen {
	
	/*
	 * 
	 * Boolean Evaluation: Given a boolean expression consisting of the symbols
	 * 0 (false), 1 (true), & (AND), | (OR), and ^ (XOR), and a desired boolean
	 * result value result, implement a function to count the number of ways of
	 * parenthesizing the expression such that it evaluates to result. The 
	 * expression should be fully parenthesized (e.g., (0)^(1)) but not 
	 * extraneously (e.g., (((0))^(1))))
	 * 
	 * Example: 
	 * countEval("1^0|0|1", false) -> 2
	 * countEval("0&0&0&1^1", true) -> 10
	 * 
	 */
	
	private static class BETNode {
		/* Boolean Expression Tree Node */
		char data;
		boolean isOperator;
		BETNode left;
		BETNode right;
		
		public BETNode(char data, boolean isOperator) throws Exception {
			if (isOperator) {
				if (data == '&' || data == '|' || data == '^')
					this.data = data;
				else 
					throw new Exception(data + "is not an operator");
			} else {
				if (data == '0' || data == '1') 
					this.data = data;
				else 
					throw new Exception(data + "is not a binray bit");
			}
			this.data = data;
		}
		
		public boolean evaluate(BETNode root) {
			if (isOperator) {
				boolean left = evaluate(root.left);
				boolean right = evaluate(root.right);
				switch (data) {
				case '&': return left & right;
				case '|': return left | right;
				case '^': return lelft ^ right;
				}
			} else {
				if (data == '1') return true;
				else return false;
			}
		}
		
	}

}
