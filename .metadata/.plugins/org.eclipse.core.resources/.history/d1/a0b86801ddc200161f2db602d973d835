
public class Four {
	public static void main(String[] args) {
		System.out.println(isPalindromable("Tacaat Coa"));
		System.out.println(isPermutationOfPalindrome("Taca Coa"));
	}
	
/*
 * 
 *  This is my answer
 * 
 */
	
	private static boolean isPalindromable(String inputString) {
		
		int [] char_count = new int[128];
		boolean one_char_flag = false;
		
		inputString = inputString.toLowerCase();
		
		for (int i = 0; i < inputString.length(); i++) {
			int val = inputString.charAt(i);
			char_count[val]++;
		}
		
		char_count[' '] = 0;
		
		for (int i = 0; i < char_count.length; i++) {
			if (char_count[i] % 2 != 0) {
				if (one_char_flag) return false;
				else one_char_flag = true;
			}
		}
		return true;
	}
	
/*
 * 
 *  This is the book answer 
 * 
 */
	static boolean isPermutationOfPalindrome(String phrase) {
		int [] table = buildCharFrequencyTable(phrase.toLowerCase());
		return checkMaxOneOdd(table);
	}

	static private int[] buildCharFrequencyTable(String phrase) {
		int [] table = new int[Character.getNumericValue('z')
		                       - Character.getNumericValue('a') + 1];
		for (int i = 0; i < phrase.length(); i++) {
			int val = getCharacter(phrase.charAt(i));
			if (val != -1) table[val]++;
		}
		return table;
	}

	static private int getCharacter(char charAt) {
		int a = Character.getNumericValue('a');
		int z = Character.getNumericValue('z');
		int val = charAt;
		if (a <= val &&  val <= z) return val - a;
		return -1;
	}
	
	static private boolean checkMaxOneOdd(int[] table) {
		boolean one_flag = false;
		for (int i = 0; i < table.length; i++) {
			if (table[i] % 2 != 0) {
				if (one_flag) return false;
				else one_flag = true;
			}
		}
		return true;
		
	}
	
}











