import java.util.LinkedList;


public class Seven {
	/*
	 * 
	 * You are given a list of projects, and a list of dependencies (which is
	 * a list of pairs of projects, where the second project is dependent on 
	 * the first project). All of a project's dependencies must be built before
	 * the project is. Find a build order that will allow the projects to be
	 * built. If there is no valid build order, return an error.
	 * 
	 * Input: 
	 * 	+ projects: a, b, c, d, e, f
	 * 	+ dependencies: (a, d), (f, b), (b,d), (f, a), (d, c)
	 * 
	 * Output: f, e, a, b, d, c
	 * 
	 */
	
	public static LinkedList<Node> buildSchedule(DiGraph graph, String key) {
		LinkedList<Node> result = new LinkedList<Node>();
		graph.falsifyVertices();
		buildSchedule(graph.getVirtex(key), result);
		return result;
	}
	
	private static void buildSchedule(Node root, LinkedList<Node> result) {
		
	}
}
