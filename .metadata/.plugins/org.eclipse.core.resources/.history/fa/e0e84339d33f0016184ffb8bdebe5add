import java.util.ArrayList;
import java.util.LinkedList;


public class Nine {
	/*
	 * 
	 * BST Sequence: A binary search tree was created by traversing through an 
	 * array from left to right and inserting each element. Given a binary search
	 * tree with distinct elements, print all possible arrays that could have 
	 * led to this tree. 
	 * 
	 */
	 
	
	/*
	 * 
	 * Fail to implement this
	 * 
	 */
	public static ArrayList<ArrayList<String>> BSTSequence(BinaryTreeNode root) {
		ArrayList<ArrayList<String>> arrays = new ArrayList<ArrayList<String>>();
		BSTSequenceHelper(root, arrays, null);
		return arrays;
	}
	
	private static void BSTSequenceHelper(
			BinaryTreeNode root, ArrayList<ArrayList<String>> result, ArrayList<String> current) {
		if (root == null) return;		
		BSTSequenceHelper(root.getLeft(), result, current);
		BSTSequenceHelper(root.getRight(), result, current);
		if (current == null) {
			current = new ArrayList<String>();
			result.add(current);
		}
		for (ArrayList<String> list: result) {
			list.add(root.getLabel());
		}
	}
	
	private static ArrayList<String> duplicate(ArrayList<String> current) {
		ArrayList<String> result = new ArrayList<String>();
		for (String string: current) result.add(string);
		return result;
	}
	
	
	/*
	 * 
	 * Book's solution
	 * 
	 */
	ArrayList<LinkedList<String>> allSequences(BinaryTreeNode root) {
		ArrayList<LinkedList<String>> result = new ArrayList<LinkedList<String>>();
		
		if (root == null) {
			result.add(new LinkedList<String>());
			return result;
		}
		
		LinkedList<String> prefix = new LinkedList<String>();
		prefix.add(root.getLabel());
		
		ArrayList<LinkedList<String>> leftSeq = allSequences(root.getLeft());
		ArrayList<LinkedList<String>> rightSeq = allSequences(root.getRight());
		
		for (LinkedList<String> left: leftSeq) {
			for (LinkedList<String> right: rightSeq) {
				
			}
		}
		
		return result;
	}
	
	
	
	public static void main(String[] args) {
		BinaryTreeNode a = new BinaryTreeNode("a");
		BinaryTreeNode b = new BinaryTreeNode("b");
		BinaryTreeNode c = new BinaryTreeNode("c");
		BinaryTreeNode d = new BinaryTreeNode("d");
		BinaryTreeNode e = new BinaryTreeNode("e");
		BinaryTreeNode f = new BinaryTreeNode("f");
		BinaryTreeNode g = new BinaryTreeNode("g");
		BinaryTreeNode h = new BinaryTreeNode("h");
		
		a.setLeft(b);
		a.setRight(h);
		b.setLeft(c);
		b.setRight(d);
//		c.setRight(h);
		h.setLeft(e);
		h.setRight(g);
		e.setLeft(f);
		
		ArrayList<ArrayList<String>> result = BSTSequence(a);
		for (ArrayList<String> array: result) {
			for (String string: array) {
				System.out.print(string + " ");
			}
			System.out.println();
		}
	}
}
